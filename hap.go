package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"slices"

	"github.com/BurntSushi/toml"
)

func hap() {
	// Reading the 'congthuc.toml' file
	var cth CongThuc
	if _, err := toml.DecodeFile("congthuc.toml", &cth); err != nil {
		log.Fatal("Kh√¥ng th·ªÉ t·∫£i 'congthuc.toml':", err)
	}
	args := os.Args
	if slices.Contains(args, "--in-cong-thuc") {
		fmt.Println("üì¶ G√≥i:", cth.Goi.Ten)
		fmt.Println("üîñ Phi√™n b·∫£n:", cth.Goi.Ban)
		fmt.Println("‚úçÔ∏è T√°c gi·∫£:", cth.Goi.TacGia)
		fmt.Println("üìÇ ƒêi·ªÉm v√†o:", cth.BanDung.DiemVao)
		fmt.Println("üì¶ Xu·∫•t ra:", cth.BanDung.Xuat)
	}

	fmt.Println("ü•ü ƒêang h·∫•p b√°nh...")

	module := compile(args, cth)

	dir := filepath.Dir(cth.BanDung.Xuat)
	file := filepath.Base(cth.BanDung.Xuat)

	tmpfile, err := os.CreateTemp(dir, file+".ll")
	if err != nil {
		log.Fatal("G·∫∑p s·ª± c·ªë khi t·∫°o file t·∫°m th·ªùi:", err)
	}
	defer tmpfile.Close()

	_, err = tmpfile.WriteString(module.String()) // Dump LLIR as string
	if err != nil {
		os.Remove(tmpfile.Name())
		log.Fatal("G·∫∑p s·ª± c·ªë khi vi·∫øt file t·∫°m th·ªùi:", err)
	}

	// Run `lli` with the temporary file
	cmd := exec.Command("lli", tmpfile.Name())
	output, err := cmd.CombinedOutput()
	if err != nil {
		os.Remove(tmpfile.Name())
		log.Fatalf("G·∫∑p s·ª± c·ªë khi ch·∫°y 'lli':\n %v\nXu·∫•t: %s", err, output)
	}

	fmt.Println(string(output))
	os.Remove(tmpfile.Name())
}
